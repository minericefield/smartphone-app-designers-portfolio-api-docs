// 
// Generated by @himenon/openapi-typescript-code-generator v0.9.7
// 
// OpenApi : 3.0.0
// 
// 


export namespace Schemas {
    export interface Design {
        _id: string;
        titleHeading: string;
        title: string;
        descriptionHeading: string;
        description: string;
        file: string;
        category: number;
        baseColor: string;
        isPublic: boolean;
    }
    export interface Designer {
        _id: string;
        name: string;
        email: string;
        descriptionHeading: string;
        description: string;
        file: string;
        baseColor: string;
    }
    export interface Settings {
        _id: string;
        isUnderMaintenance: number;
        maintenanceMessage: string;
    }
}
export interface Parameter$FetchDesigns {
    category: 1 | 2;
}
export interface Response$FetchDesigns$Status$200 {
    "application/json": {
        designs: Schemas.Design[];
    };
}
export interface Response$FetchDesigner$Status$200 {
    "application/json": {
        designer: Schemas.Designer;
    };
}
export interface Response$FetchSettings$Status$200 {
    "application/json": {
        settings: Schemas.Settings;
    };
}
export type ResponseContentType$FetchDesigns = keyof Response$FetchDesigns$Status$200;
export interface Params$FetchDesigns {
    parameter: Parameter$FetchDesigns;
}
export type ResponseContentType$FetchDesigner = keyof Response$FetchDesigner$Status$200;
export type ResponseContentType$FetchSettings = keyof Response$FetchSettings$Status$200;
export type HttpMethod = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$FetchDesigns$Status$200 | Response$FetchDesigner$Status$200 | Response$FetchSettings$Status$200;
export namespace ErrorResponse {
    export type FetchDesigns = void;
    export type FetchDesigner = void;
    export type FetchSettings = void;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(httpMethod: HttpMethod, url: string, headers: ObjectLike | any, requestBody: ObjectLike | any, queryParameters: QueryParameters | undefined, options?: RequestOption) => Promise<T>;
}
export class Client<RequestOption> {
    constructor(private apiClient: ApiClient<RequestOption>, private baseUrl: string) { }
    /** Designs */
    public async FetchDesigns(params: Params$FetchDesigns, option?: RequestOption): Promise<Response$FetchDesigns$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/designs/${params.parameter.category}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /** Designer */
    public async FetchDesigner(option?: RequestOption): Promise<Response$FetchDesigner$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/designer`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /** Settings */
    public async FetchSettings(option?: RequestOption): Promise<Response$FetchSettings$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/settings`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
}
