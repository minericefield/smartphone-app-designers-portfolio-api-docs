/* tslint:disable */
/* eslint-disable */
/**
 * Api Definitions
 * Only for Api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Design
 */
export interface Design {
    /**
     * 
     * @type {string}
     * @memberof Design
     */
    _id: string;
    /**
     * 
     * @type {string}
     * @memberof Design
     */
    titleHeading: string;
    /**
     * 
     * @type {string}
     * @memberof Design
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Design
     */
    descriptionHeading: string;
    /**
     * 
     * @type {string}
     * @memberof Design
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Design
     */
    file: string;
    /**
     * 
     * @type {number}
     * @memberof Design
     */
    category: number;
    /**
     * 
     * @type {string}
     * @memberof Design
     */
    baseColor: string;
    /**
     * 
     * @type {number}
     * @memberof Design
     */
    isPublic: number;
}
/**
 * 
 * @export
 * @interface Designer
 */
export interface Designer {
    /**
     * 
     * @type {string}
     * @memberof Designer
     */
    _id: string;
    /**
     * 
     * @type {string}
     * @memberof Designer
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Designer
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof Designer
     */
    descriptionHeading: string;
    /**
     * 
     * @type {string}
     * @memberof Designer
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Designer
     */
    file: string;
    /**
     * 
     * @type {string}
     * @memberof Designer
     */
    baseColor: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Design>}
     * @memberof InlineResponse200
     */
    designs: Array<Design>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Designer}
     * @memberof InlineResponse2001
     */
    designer: Designer;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Settings}
     * @memberof InlineResponse2002
     */
    settings: Settings;
}
/**
 * 
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    _id: string;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    isUnderMaintenance: number;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    maintenanceMessage: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Designer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDesigner: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/designer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Designs
         * @param {1 | 2} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDesigns: async (category: 1 | 2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('fetchDesigns', 'category', category)
            const localVarPath = `/api/designs/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Designer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDesigner(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchDesigner(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Designs
         * @param {1 | 2} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDesigns(category: 1 | 2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchDesigns(category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Designer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDesigner(options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.fetchDesigner(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Designs
         * @param {1 | 2} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDesigns(category: 1 | 2, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.fetchDesigns(category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSettings(options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.fetchSettings(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Designer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchDesigner(options?: any) {
        return DefaultApiFp(this.configuration).fetchDesigner(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Designs
     * @param {1 | 2} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchDesigns(category: 1 | 2, options?: any) {
        return DefaultApiFp(this.configuration).fetchDesigns(category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchSettings(options?: any) {
        return DefaultApiFp(this.configuration).fetchSettings(options).then((request) => request(this.axios, this.basePath));
    }
}


